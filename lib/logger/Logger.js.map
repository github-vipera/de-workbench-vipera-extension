{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/logger/Logger.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEF,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClC,OAAO,EAAC,YAAY,EAAsB,MAAM,uBAAuB,CAAA;AAEvE,MAAM;IAQJ;QAEE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACjC,UAAU,EAAE;gBACV,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;oBACxB,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE,+EAA+E;oBACzF,gBAAgB,EAAE,IAAI;oBACtB,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,OAAO;oBAChB,QAAQ,EAAE,CAAC;oBACX,QAAQ,EAAE,KAAK;iBAClB,CAAC;gBACF,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;oBAC3B,KAAK,EAAE,SAAS;oBAChB,gBAAgB,EAAE,IAAI;oBACtB,IAAI,EAAE,KAAK;oBACX,QAAQ,EAAE,IAAI;iBACjB,CAAC;aACH;SACF,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,YAAY,EAAE,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,WAAW;QACd,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,QAAQ,GAAG,IAAI,MAAM,EAAE,CAAC;QACnC,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAI,CAAC,GAAG,GAAG;QACT,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAC,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,GAAG,GAAG;QACV,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,IAAI,CAAC,GAAG,GAAG;QACT,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAC,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,GAAG,GAAG;QACV,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAIO,YAAY,CAAC,KAAc,EAAC,GAAG,GAAG;QACxC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAC,KAAK,EAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,kBAAkB,CAAC,QAAuB;QACxC,8DAA8D;QAC9D,8DAA8D;QAC9D,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,KAAY,EAAC,IAAU;YACvD,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAMD,MAAM,CAAN,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,yCAAO,CAAA;IACP,yCAAO,CAAA;IACP,uCAAM,CAAA;IACN,uCAAM,CAAA;IACN,yCAAO,CAAA;AACT,CAAC,EANW,QAAQ,KAAR,QAAQ,QAMnB","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n var winston = require('winston');\nimport {EventSupport,EventSupportDelegate} from '../utils/EventSupport'\n\nexport class Logger {\n\n  private static instance: Logger;\n\n  private logger: any;\n  private evtSupport:EventSupport;\n\n\n  private constructor(){\n\n    this.logger = new (winston.Logger)({\n      transports: [\n        new winston.transports.File({\n            level: 'verbose',\n            filename: '/Users/enrico/Develop/NewDynamicEngine/Atom Plugins/de-workbench/all-logs.log',\n            handleExceptions: true,\n            json: true,\n            maxsize: 5242880, //5MB\n            maxFiles: 5,\n            colorize: false\n        }),\n        new winston.transports.Console({\n            level: 'verbose',\n            handleExceptions: true,\n            json: false,\n            colorize: true\n        })\n      ]\n    });\n    this.evtSupport = new EventSupport();\n  }\n\n  static getInstance() {\n      if (!Logger.instance) {\n          Logger.instance = new Logger();\n      }\n      return Logger.instance;\n  }\n\n  info(...msg){\n    this.fireLogEvent(LogLevel.INFO,msg);\n    this.logger.info(msg);\n  }\n\n  debug(...msg){\n    this.fireLogEvent(LogLevel.DEBUG,msg);\n    this.logger.debug(msg);\n  }\n\n  warn(...msg){\n    this.fireLogEvent(LogLevel.WARN,msg);\n    this.logger.warn(msg);\n  }\n\n  error(...msg){\n    this.fireLogEvent(LogLevel.ERROR,msg);\n    this.logger.error(msg);\n  }\n\n\n\n  private fireLogEvent(level:LogLevel,...msg){\n    this.evtSupport.fireEvent('logging',level,msg.join(' , '));\n  }\n\n  addLoggingListener(listener:LoggerListener):void{\n    //this.logger.on('logging',listener.onLogging.bind(listener));\n    //this.logger.on('logging',listener.onLogging.bind(listener));\n    this.evtSupport.addEventListener((event:string,data:any[]) => {\n      listener.onLogging(data[0],data[1]);\n    });\n  }\n}\n\nexport interface LoggerListener{\n  onLogging(level:LogLevel, msg:string);\n}\n\nexport enum LogLevel {\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'WARN',\n  'ERROR',\n}\n"]}