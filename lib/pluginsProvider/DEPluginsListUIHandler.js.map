{"version":3,"file":"DEPluginsListUIHandler.js","sourceRoot":"","sources":["../../src/pluginsProvider/DEPluginsListUIHandler.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n import { LoggerService } from '../Logger'\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { DESDKRegistry } from './DESDKRegistry'\nimport { EventBus } from '../utils/EventBus'\nconst remote = require('remote');\nconst dialog = remote.require('electron').dialog;\nconst fs = require('fs');\n\nexport class DEPlusinsListUIHandler {\n\n  private mainElement: HTMLElement;\n\n  //private offlineButton: HTMLElement;\n  private offlineSettingsContainer: HTMLElement;\n  private offlineSDKLocation: HTMLElement;\n  private offlineButtonSDKPathSelector: HTMLElement;\n  private offlineToggleInput: HTMLElement;\n\n  private btnViperaRegistrySelector:HTMLElement;\n  private btnDefaultRegistrySelector:HTMLElement;\n  private npmSettingsSettingsContainer:HTMLElement;\n  private currentNPMRegistry:HTMLElement;\n\n  private actionListener:Function;\n\n  constructor(){\n    this.initUI();\n  }\n\n  private initUI(){\n\n    // offline toggle\n    this.offlineToggleInput = createElement('input',{\n        className: 'input-toggle'\n    })\n    this.offlineToggleInput.setAttribute('type','checkbox')\n    let offlineToggle = createElement('label',{\n      elements: [\n        this.offlineToggleInput,\n        createText('Offline SDK')\n      ],\n      className: 'input-label deweb-dynamicengine-plugins-offlinemode-toggle-label'\n    })\n    this.offlineToggleInput.addEventListener('change', (evt:any)=>{\n      let checkValue = evt.srcElement.checked;\n      this.setOfflineSDK(checkValue);\n    })\n    // offline toggle input\n\n\n    // Offline Management\n    this.offlineSDKLocation = createElement('span',{\n      elements: [\n        createText(\"/\"),\n      ],\n      className: 'deweb-dynamicengine-plugins-offlinemode-currentpath highlight'\n    })\n    this.offlineSettingsContainer = createElement('div',{\n      elements: [\n        createText(\"Current SDK location: \"),\n        this.offlineSDKLocation,\n      ],\n      className : 'deweb-dynamicengine-plugins-settings-container offline front'\n    });\n    this.offlineButtonSDKPathSelector = createElement('button',{\n      elements: [\n        createElement('span',{\n          className: 'icon icon-package'\n        }),\n        createText('Set Vipera SDK location')\n      ],\n      className: 'inline-block btn'\n    })\n    this.offlineButtonSDKPathSelector.addEventListener('click',()=>{\n      this.selectSDKOfflinePath();\n    })\n    // Offline Management\n\n\n\n\n    // NPM registry Management\n    this.btnViperaRegistrySelector = createElement('button',{\n      elements: [\n        createElement('span',{\n          className: 'icon icon-repo-clone'\n        }),\n        createText('Set Vipera NPM Registry')\n      ],\n      className: 'inline-block btn'\n    })\n    this.btnViperaRegistrySelector.addEventListener('click',()=>{\n      DESDKRegistry.getInstance().installViperaNPMRegistry()\n    })\n    this.btnDefaultRegistrySelector = createElement('button',{\n      elements: [\n        createElement('span',{\n          className: 'icon icon-repo-clone'\n        }),\n        createText('Restore Default NPM Registry')\n      ],\n      className: 'inline-block btn'\n    })\n    this.btnDefaultRegistrySelector.addEventListener('click',()=>{\n      DESDKRegistry.getInstance().restoreDefaultNPMRegistry()\n    })\n\n    this.currentNPMRegistry = createElement('span',{\n      elements: [\n        createText(\"https://---\"), //TODO!!\n      ],\n      className: 'deweb-dynamicengine-plugins-offlinemode-currentpath highlight'\n    })\n    this.npmSettingsSettingsContainer = createElement('div',{\n      elements: [\n        createText(\"Current NPM Registry: \"),\n        this.currentNPMRegistry,\n      ],\n      className : 'deweb-dynamicengine-plugins-settings-container npm back'\n    });\n    // end NPM registry management\n\n\n    //status container\n    let statusContainer = createElement('div',{\n      elements: [\n        createElement('div',{\n          elements: [\n            this.offlineSettingsContainer,\n            this.npmSettingsSettingsContainer\n          ],\n          className: 'flipper'\n        })\n      ],\n      className : 'flip-container'\n    })\n\n\n    let toolbarContainer = createElement('div',{\n      elements: [\n        offlineToggle, this.offlineButtonSDKPathSelector,this.btnViperaRegistrySelector,this.btnDefaultRegistrySelector,\n        statusContainer\n      ],\n      className: 'block'\n    })\n\n    this.mainElement = createElement('div',{\n      elements: [ toolbarContainer]\n    })\n\n    this.setOfflineSDK(DESDKRegistry.getInstance().isOfflineSDK())\n\n    EventBus.getInstance().subscribe(EventBus.EVT_CONFIG_CHANGED,()=>{\n      this.updateUI();\n      this.notifyChanges();\n    });\n\n  }\n\n  public addActionListener(actionListener:Function):DEPlusinsListUIHandler{\n    this.actionListener = actionListener;\n    return this;\n  }\n\n  private updateUI(){\n    this.offlineSDKLocation.innerText = DESDKRegistry.getInstance().getOfflineSDKPath();\n    this.currentNPMRegistry.innerText = DESDKRegistry.getInstance().getCurrentNPMRegistry();\n    let checkbox:any = this.offlineToggleInput;\n    let isOfflineSDK = DESDKRegistry.getInstance().isOfflineSDK()\n    checkbox.checked =isOfflineSDK\n    if (isOfflineSDK){\n      this.showSDKSettings(true);\n      this.showNPMRegistrySettings(false);\n    } else {\n      this.showSDKSettings(false);\n      this.showNPMRegistrySettings(true);\n    }\n  }\n\n  public element():HTMLElement {\n    return this.mainElement;\n  }\n\n  private showNPMRegistrySettings(show:boolean){\n    if (show){\n      this.npmSettingsSettingsContainer.style.visibility = \"visible\"\n      this.npmSettingsSettingsContainer.style.display = \"block\"\n\n      this.btnViperaRegistrySelector.style.display = \"inline-block\"\n      this.btnDefaultRegistrySelector.style.display = \"inline-block\"\n    } else {\n      this.npmSettingsSettingsContainer.style.display = \"none\"\n      this.npmSettingsSettingsContainer.style.visibility = \"hidden\"\n\n      this.btnViperaRegistrySelector.style.display = \"none\"\n      this.btnDefaultRegistrySelector.style.display = \"none\"\n    }\n  }\n\n  private showSDKSettings(show:boolean){\n    if (show){\n      this.offlineSettingsContainer.style.visibility = \"visible\"\n      this.offlineSettingsContainer.style.display = \"block\"\n\n      this.offlineButtonSDKPathSelector.style.display = \"inline-block\"\n    } else {\n      this.offlineSettingsContainer.style.display = \"none\"\n      this.offlineSettingsContainer.style.visibility = \"hidden\"\n\n      this.offlineButtonSDKPathSelector.style.display = \"none\"\n    }\n  }\n\n\n  public setOfflineSDK(offline:boolean){\n    DESDKRegistry.getInstance().setOfflineSDK(offline);\n    this.updateUI();\n  }\n\n  private selectSDKOfflinePath(){\n    var sdkPath = dialog.showOpenDialog({properties: ['openDirectory']});\n    if(!sdkPath){\n      return;\n    }\n    if(!fs.existsSync(sdkPath[0])){\n      atom.notifications.addError(\"Invalid sdk path\");\n      return;\n    }\n    DESDKRegistry.getInstance().setOfflineSDKPath(sdkPath[0]);\n  }\n\n  private notifyChanges(){\n    if (this.actionListener){\n      this.actionListener('reloadPluginsList')\n    }\n  }\n\n}\n"]}