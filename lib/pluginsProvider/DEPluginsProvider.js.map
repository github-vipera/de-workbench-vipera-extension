{"version":3,"file":"DEPluginsProvider.js","sourceRoot":"","sources":["../../src/pluginsProvider/DEPluginsProvider.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { LoggerService } from '../Logger'\nimport { DEWBResourceManager } from '../utils/DEWBResourceManager'\nimport { DEPlusinsListUIHandler } from './DEPluginsListUIHandler'\nimport { DESDKRegistry } from './DESDKRegistry'\nimport { WorkbenchServices } from '../WorkbenchServices'\n\nvar remote = require('remote-json');\n\nexport interface CordovaPluginsProviderService {\n  getCordovaPlugins():Promise<Array<any>>;\n  getProviderName():string;\n  getExtendedUI():HTMLElement;\n}\n\nexport class DEPluginsProvider implements CordovaPluginsProviderService {\n\n  private uiHandler:DEPlusinsListUIHandler;\n  private eventHandler:Function;\n  private currentProjectRoot:string;\n\n  public constructor() {\n    LoggerService.debug(\"Creating CordovaPluginsProvidersManager...\")\n    console.log(\"Creating CordovaPluginsProvidersManager...\");\n\n    this.currentProjectRoot = WorkbenchServices.ProjectManager.getCurrentProjectPath();\n\n    // subcribe for plugins events\n    WorkbenchServices.Events.on('dewb.project.cordova.pluginAdded',()=>{\n      this.notifyListChanged();\n    })\n    WorkbenchServices.Events.on('dewb.project.cordova.pluginRemoved',()=>{\n      this.notifyListChanged();\n    })\n\n    atom.config.onDidChange('de-workbench-vipera-extension.OfflineSDKPath', (val)=>{\n      this.notifyListChanged()\n    });\n\n  }\n\n  /**\n   * called from the Workbench\n   **/\n  public getProviderName():string {\n    return \"Dynamic Engine Plugins\"\n  }\n\n  /**\n   * called from the Workbench\n   **/\n  async getCordovaPlugins(){\n    console.log(\"getCordovaPlugins called\");\n    var ret = [];\n\n    if (DESDKRegistry.getInstance().isOfflineSDK()){\n      //read from local path\n      ret = DESDKRegistry.getInstance().getLocalSDKPlugins()\n    } else {\n      //read from URI\n          //ret = DEWBResourceManager.getJSONResource('dynamic_engine_plugins.json')[\"plugins\"];\n          ret = await this.remotePlugins();\n    }\n\n    let installedPlugins = await WorkbenchServices.ProjectManager.cordova.getInstalledPlugins(this.currentProjectRoot);\n    let processedResults:Array<any> = WorkbenchServices.ProjectManager.cordova.markInstalledPlugins(ret, installedPlugins);\n\n    return processedResults;\n  }\n\n  remotePlugins():Promise<Array<any>> {\n    return new Promise((resolve, reject)=>{\n      let remoteRegistry = \"https://gitlab.vipera.com/dynamic-engine/de-plugins-registry/raw/master/de-plugins-registry.json\";\n      remote.contentTypes[\"application/json\"] = true;\n      remote.contentTypes[\"text/plain\"] = false;\n      remote(remoteRegistry)\n          .get(function (err, res, body) {\n              try {\n                let jsonData = JSON.parse(body);\n                resolve(jsonData[\"plugins\"]);\n              } catch (ex){\n                reject(ex);\n              }\n          });\n    });\n  }\n\n  /**\n  private createCordovaPluginDesc(){\n    return {\n      name: \"pippo\",\n      id: \"pippo\",\n      version: \"1.0.2\",\n      description: \"bklabkla\",\n      installed: false,\n      author: \"Vipera Plc\",\n      homepage: \"https://&www.vipera.com\",\n      license: \"Vipera Commercial\",\n      repository: \"local\",\n      repositoryType: \"private\",\n      lastUpdateTime: \"\"+ new Date(),\n      rating: 10,\n      platforms: [this.getPlatformDesc('ios'), this.getPlatformDesc('android')]\n    }\n  }\n  **/\n\n  private getPlatformDesc(platform:string){\n    if (platform==='ios'){\n      return {\n        name: 'ios',\n        displayName: 'iOS'\n      }\n    }\n    else if (platform==='android'){\n      return {\n        name: 'android',\n        displayName: 'Android'\n      }\n    }\n    else if (platform==='browser'){\n      return {\n        name: 'browser',\n        displayName: 'Browser'\n      }\n    }\n  }\n\n  /**\n   * called from the Workbench\n   **/\n  getExtendedUI():HTMLElement {\n    if (!this.uiHandler){\n      this.uiHandler = new DEPlusinsListUIHandler().addActionListener((action)=>{\n          // reload plugins and notify list changes\n          this.notifyListChanged();\n      });\n    }\n    return this.uiHandler.element()\n  }\n\n  /**\n   * Notify the Workbench to reload the list\n   **/\n  private notifyListChanged(){\n    if (this.eventHandler){\n      this.eventHandler({ type: 'listChanged' })\n    }\n  }\n\n  /**\n   * called from the Workbench\n   **/\n  addEventHandler(handler:Function){\n    this.eventHandler = handler;\n  }\n\n}\n"]}