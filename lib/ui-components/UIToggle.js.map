{"version":3,"file":"UIToggle.js","sourceRoot":"","sources":["../../src/ui-components/UIToggle.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEF,OAAO,EACL,UAAU,EACV,aAAa,EACb,aAAa,EAOd,MAAM,kBAAkB,CAAC;AAW3B,MAAM;IAQJ,YAAY,OAAuB;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAES,MAAM;QACd,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,KAAK,EAAC;YACrC,SAAS,EAAE,sCAAsC;SAClD,CAAC,CAAA;QAEF,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,OAAO,EAAC;YACvC,SAAS,EAAE,cAAc;SAC1B,CAAC,CAAA;QACF,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAC,UAAU,CAAC,CAAA;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,EAAC,EAAE,CAAC,CAAA;QAC7C,CAAC;QAED,gGAAgG;QAChG,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,OAAO,EAAC;YACtC,QAAQ,EAAC,CAAE,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAE;YAC/D,SAAS,EAAE,aAAa;SACzB,CAAC,CAAA;QAEF,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IAElD,CAAC;IAGC,IAAW,OAAO;QAChB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED,IAAW,KAAK;QACd,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,IAAW,KAAK,CAAC,KAAa;QAC5B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC;YACT,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,EAAC,EAAE,CAAC,CAAA;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,CAAC,CAAA;QAC7C,CAAC;IACH,CAAC;CAGJ","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { LoggerService } from '../Logger'\nimport { EventEmitter }  from 'events'\n\n\nexport interface UIToggleOptions {\n  caption:string;\n  value?:boolean;\n}\n\nexport class UIToggle {\n\n  mainElement : HTMLElement;\n  options:UIToggleOptions;\n  lblCaption:HTMLElement;\n  toggleInput:HTMLElement;\n\n\n  constructor(options:UIToggleOptions){\n    this.options = options;\n    this.initUI();\n  }\n\n  protected initUI(){\n    this.mainElement = createElement('div',{\n      className: 'de-wb-vipera-ext-ui-toggle-container'\n    })\n\n    this.toggleInput = createElement('input',{\n      className: 'input-toggle'\n    })\n    this.toggleInput.setAttribute('type','checkbox')\n    if (this.options.value){\n      this.toggleInput.setAttribute('checked','')\n    }\n\n    //<label class='input-label'><input class='input-toggle' type='checkbox' checked> Toggle</label>\n    this.lblCaption = createElement('label',{\n      elements:[ this.toggleInput, createText(this.options.caption) ],\n      className: 'input-label'\n    })\n\n    insertElement(this.mainElement, this.lblCaption)\n\n  }\n\n\n    public get element():HTMLElement {\n      return this.mainElement\n    }\n\n    public get value():boolean{\n      return this.toggleInput[\"checked\"];\n    }\n\n    public set value(value:boolean){\n      if (value){\n        this.toggleInput.setAttribute('checked','')\n      } else {\n        this.toggleInput.removeAttribute('checked')\n      }\n    }\n\n\n}\n"]}