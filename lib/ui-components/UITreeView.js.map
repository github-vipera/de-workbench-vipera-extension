{"version":3,"file":"UITreeView.js","sourceRoot":"","sources":["../../src/ui-components/UITreeView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { UIComponent, UIBaseComponent } from './UIComponent'\nimport { forEach, remove } from 'lodash'\nexport interface UITreeItem {\n  id:string;\n  name:string;\n  className?:string;\n  icon?:string;\n  expanded?:boolean;\n  htmlElement?:HTMLElement;\n  children?:Array<UITreeItem>;\n  selected?:boolean;\n}\n\nexport interface UITreeViewModel {\n  root:UITreeItem;\n  className?:string;\n  getItemById?(id:string,model:UITreeViewModel):UITreeItem; // optional, if provided, listeners receive both id and item of selection\n}\n\nexport interface UITreeViewSelectListener {\n  onItemSelected(itemId:string,item?:UITreeItem):void\n}\n\nexport class UITreeView extends UIBaseComponent {\n\n  private model:UITreeViewModel;\n  private treeElement: HTMLElement;\n  private currentSelection: string;\n  private listeners: Array<UITreeViewSelectListener> = [];\n\n  constructor(model?:UITreeViewModel){\n    super();\n    this.initUI();\n    if (model){\n      this.setModel(model);\n    }\n  }\n\n  private initUI(){\n    this.mainElement =  createElement('div', {\n        elements: [\n              ],\n        className:'de-workbench-treeview'\n    })\n\n  }\n\n  public setModel(model:UITreeViewModel){\n    this.model = model;\n    this.modelChanged()\n  }\n\n  public modelChanged(){\n    let oldTree = this.treeElement;\n    this.treeElement = this.rebuildTree();\n    if (oldTree){\n      this.mainElement.replaceChild(this.treeElement, oldTree);\n    } else {\n      insertElement(this.mainElement, this.treeElement)\n    }\n  }\n\n  private rebuildTree():HTMLElement {\n\n    let rootItemEl = this.buildTreeItem(this.model.root);\n\n    let ulMainTree = createElement('ul',{\n        elements : [ rootItemEl ],\n        className: 'list-tree has-collapsable-children focusable-panel'\n    })\n\n    return ulMainTree;\n  }\n\n  private buildTreeItem(item:UITreeItem){\n\n    let iconClass = \"\";\n    if (item.icon){\n      iconClass = \"icon \" + item.icon\n    }\n    // create item caption\n    let treeItemCaption = createElement('span',{\n      elements :  [ createText(item.name)],\n      className: iconClass\n    })\n\n    let treeItemHeader = createElement('div',{\n      elements: [ treeItemCaption ],\n      className: 'header list-item'\n    });\n    treeItemHeader.setAttribute(\"treeitemId\", item.id)\n    treeItemHeader.setAttribute(\"id\", \"de-woekbench-treeview-treeitem-header-\" + item.id)\n    if (item.selected){\n        treeItemHeader.classList.add(\"selected\")\n    }\n\n    treeItemHeader.addEventListener('click',(evt)=>{\n      this.onItemClicked(evt);\n    })\n\n    // create children\n    let childCount = 0;\n    let treeItemChildren = createElement('ol',{\n      className: 'de-workbench-treeview-chidlren-list entries list-tree'\n    })\n    if (item.children){\n      childCount = item.children.length;\n      for (var i=0;i<item.children.length;i++){\n          let child = this.buildTreeItem(item.children[i])\n          insertElement(treeItemChildren, child)\n      }\n    }\n\n    let listClassName = 'list-item';\n    if (childCount>0){\n      listClassName = 'list-nested-item'\n    }\n    if (!item.expanded){\n      listClassName += ' collapsed'\n    }\n    let treeItem = createElement('li',{\n      className : 'de-woekbench-treeview-treeitem entry ' + listClassName ,\n      elements : [ treeItemHeader, treeItemChildren ]\n    })\n    treeItem.setAttribute(\"treeitemId\", item.id)\n    treeItem.setAttribute(\"id\", this.buildItemElementId(item.id))\n    return treeItem;\n  }\n\n  addSelectListener(listener:UITreeViewSelectListener){\n    this.listeners.push(listener);\n  }\n  removeSelectListener(listener:UITreeViewSelectListener){\n    remove(this.listeners,function(single){\n      return single == listener;\n    });\n  }\n\n  protected onItemClicked(evt){\n    // Expand/Collapse if necessary\n    let itemId = evt.currentTarget.attributes[\"treeitemId\"].value;\n    this.toggleTreeItemExpansion(itemId);\n\n    // Select the item\n    if (this.currentSelection){\n      // remove current selection\n      this.selectItemById(this.currentSelection, false);\n    }\n    this.selectItemById(itemId, true);\n    this.currentSelection = itemId;\n    this.fireSelectionChange(this.currentSelection);\n  }\n\n  protected fireSelectionChange(itemId:string){\n    forEach(this.listeners,(single:UITreeViewSelectListener) => {\n      let item:UITreeItem=null;\n      if(this.model.getItemById){\n        item=this.model.getItemById(itemId,this.model);\n      }\n      single.onItemSelected(itemId,item);\n    });\n  }\n\n  public getCurrentSelectedItemId():string{\n    return this.currentSelection\n  }\n\n  public selectItemById(id:string,select:boolean){\n    let el = this.mainElement.querySelector('#de-woekbench-treeview-treeitem-header-' + id)\n    if (select){\n      el.classList.add(\"selected\");\n    } else {\n      el.classList.remove(\"selected\");\n    }\n  }\n\n  public buildItemElementId(id:string):string{\n    return \"de-woekbench-treeview-treeitem-li-\" +  id;\n  }\n\n  public expandItemById(id:string){\n    let el = this.getTreeItemById(id);\n    el.classList.remove(\"collapsed\");\n  }\n\n  public collapseItemById(id:string){\n    let el = this.getTreeItemById(id);\n    el.classList.add(\"collapsed\");\n  }\n\n  public toggleTreeItemExpansion(id:string){\n    let el = this.getTreeItemById(id);\n    el.classList.toggle(\"collapsed\");\n  }\n\n  public getTreeItemById(id:string){\n    let itemElementId = this.buildItemElementId(id);\n    return this.mainElement.querySelector(\"#\"+itemElementId);\n  }\n\n  public destroy(){\n    this.model = undefined;\n    this.listeners = null;\n    if (this.treeElement){\n      this.treeElement.remove()\n    }\n    super.destroy();\n  }\n}\n\n\nexport function findItemInTreeModel(itemId:string,model:UITreeViewModel){\n    function _findInTreeItem(item:UITreeItem){\n      if(item.id == itemId){\n        return item;\n      }\n      if(!item.children){\n        return null;\n      }\n      for(let i=0;i < item.children.length; i ++){\n        let found = _findInTreeItem(item.children[i]);\n        if(found){\n          return found;\n        }\n      }\n    }\n\n    return _findInTreeItem(model.root);\n}\n"]}