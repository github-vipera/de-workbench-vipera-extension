{"version":3,"file":"UIInputFormElement.js","sourceRoot":"","sources":["../../src/ui-components/UIInputFormElement.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEH,OAAO,EAEN,aAAa,EAQb,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAe,eAAe,EAAE,MAAM,8BAA8B,CAAA;AAG3E,MAAM,yBAA0B,SAAQ,eAAe;IAMrD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEO,OAAO;QAEb,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE;YAClC,QAAQ,EAAE,EACT;SACF,CAAC,CAAA;QACF,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,kBAAkB,EAAE,EACpD,CAAC,CAAA;QACF,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAC,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,UAAU,EAAC,IAAI,CAAC,CAAC;QAE/C,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,KAAK,EAAC;YACrC,QAAQ,EAAE;gBACR,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,WAAW;aACjB;YACD,SAAS,EAAE,qBAAqB;SACjC,CAAC,CAAA;IACJ,CAAC;IAEM,UAAU,CAAC,OAAc;QAC5B,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,QAAQ,CAAC,KAAY;QAC1B,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,QAAQ;QACb,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAA;IAClC,CAAC;IAEM,QAAQ,CAAC,KAAY;QAC1B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAA;QACpC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,cAAc,CAAC,WAAkB;QACtC,IAAI,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAA;QAC/C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,QAAQ;QACd,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;IACxC,CAAC;IAEM,iBAAiB,CAAC,QAAQ;QAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAA;YAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,GAAG;gBACzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;oBACtC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;YACL,CAAC,CAAC,CAAA;QACJ,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport {\n createText,\n createElement,\n insertElement,\n createGroupButtons,\n createButton,\n createIcon,\n createIconFromPath,\n attachEventFromObject,\n createTextEditor\n} from '../element/index';\nimport { UIComponent, UIBaseComponent } from '../ui-components/UIComponent'\n\n\nexport class UIInputFormElement extends UIBaseComponent {\n\n  private label:HTMLElement;\n  private inputEditor:HTMLElement;\n  private listeners:Array<Function>;\n\n  constructor(){\n    super();\n    this.buildUI();\n  }\n\n  private buildUI(){\n\n    this.label = createElement('label', {\n      elements: [\n      ]\n    })\n    this.inputEditor = createElement('atom-text-editor', {\n    })\n    this.inputEditor.setAttribute('mini','');\n    this.inputEditor.setAttribute('tabindex','-1');\n\n    this.mainElement = createElement('div',{\n      elements: [\n        this.label,\n        this.inputEditor\n      ],\n      className: 'block control-group'\n    })\n  }\n\n  public setCaption(caption:string):UIInputFormElement{\n      this.label.innerText = caption;\n      return this;\n  }\n\n  public setValue(value:string):UIInputFormElement{\n    this.getModel().setText(value)\n      return this;\n  }\n\n  public getValue():string{\n    return this.getModel().getText()\n  }\n\n  public setWidth(width:string):UIInputFormElement{\n    this.mainElement.style.width = width\n    return this;\n  }\n\n  public setPlaceholder(placeholder:string):UIInputFormElement{\n    this.getModel().setPlaceholderText(placeholder)\n    return this;\n  }\n\n  private getModel(){\n    return this.inputEditor['getModel']();\n  }\n\n  public addChangeListener(listener):UIInputFormElement{\n    if (!this.listeners){\n      this.listeners = new Array()\n      this.getModel().emitter.on('did-change', (evt)=>{\n          for (var i=0;i<this.listeners.length;i++){\n              this.listeners[i](this);\n          }\n      })\n    }\n    this.listeners.push(listener);\n    return this;\n  }\n\n}\n"]}