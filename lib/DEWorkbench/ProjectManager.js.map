{"version":3,"file":"ProjectManager.js","sourceRoot":"","sources":["../../src/DEWorkbench/ProjectManager.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { EventEmitter }  from 'events'\nimport { Cordova } from '../cordova/Cordova'\nimport { Logger } from '../logger/Logger'\nimport { EventBus } from '../DEWorkbench/EventBus'\n\n\nexport class ProjectManager {\n\n    private static instance: ProjectManager;\n    private currentProjectPath: string;\n    private events: EventEmitter;\n    public cordova: Cordova;\n\n    private constructor() {\n      Logger.getInstance().debug(\"ProjectManager initializing...\");\n      this.events = new EventEmitter();\n\n      // create Cordova utilities\n      this.cordova = new Cordova();\n\n      // By default use the first project root\n      this.currentProjectPath = this.getFirstAvailableProjectRootFolder();\n      if (this.currentProjectPath){\n        this.fireProjectChanged(this.currentProjectPath);\n      }\n\n      // Listen for ATOM projects\n      //atom.workspace[\"onDidChangeActiveTextEditor\"](() => this.fireEditorChanged());\n      atom.workspace[\"onDidChangeActivePaneItem\"](() => this.fireEditorChanged());\n      atom.workspace[\"onDidOpen\"](() => this.fireEditorChanged());\n      atom.project[\"onDidChangePaths\"](() => this.firePathChanged());\n    }\n\n    static getInstance() {\n        if (!ProjectManager.instance) {\n            ProjectManager.instance = new ProjectManager();\n        }\n        return ProjectManager.instance;\n    }\n\n    private firePathChanged(){\n      this.events.emit('didPathChanged');\n      console.log(\"PathChanges\");\n      let ok = this.fireEditorChanged();\n      if (!ok){\n          this.currentProjectPath = this.getFirstAvailableProjectRootFolder();\n          if (this.currentProjectPath){\n            this.fireProjectChanged(this.currentProjectPath);\n          }\n      }\n    }\n\n    getFirstAvailableProjectRootFolder(){\n      let currentPaths = atom.project[\"getPaths\"]();\n      if (currentPaths && currentPaths.length>0){\n        return atom.project[\"getPaths\"]()[0];\n      }\n      return undefined;\n    }\n\n    getAllAvailableProjects():Array<any>{\n      let currentPaths = atom.project[\"getPaths\"]();\n      if(currentPaths){\n        return currentPaths;\n      }else{\n        return [];\n      }\n    }\n\n    /**\n     * Return true if an editore opened and selected is available\n     */\n    private fireEditorChanged():boolean{\n      var editor = atom.workspace.getActiveTextEditor()\n      if (editor){\n        var yourPath = editor[\"getPath\"]()\n        let projects = atom.project['getPaths']()\n        if (projects==undefined || projects.length==0){\n          return false;\n        }\n        let i = 0;\n        let currentProjectPath:string;\n        for (i=0;i<projects.length;i++){\n          if (yourPath && yourPath.indexOf(projects[i])==0){\n            currentProjectPath = projects[i];\n            if (!this.currentProjectPath || currentProjectPath!=this.currentProjectPath){\n              this.fireProjectChanged(currentProjectPath);\n            }\n            break;\n          }\n        }\n        return true;\n      }\n      return false;\n    }\n\n    private fireProjectChanged(projectPath:string) {\n      this.currentProjectPath = projectPath;\n      //console.log(\"Project changed: \", projectPath);\n      this.events.emit('didProjectChanged', projectPath);\n    }\n\n    public didProjectChanged(callback:Function){\n      this.events.on('didProjectChanged', callback);\n      EventBus.getInstance().publish(EventBus.EVT_PROJECT_CHANGED, this.currentProjectPath)\n    }\n\n    public didPathChanged(callback:Function){\n      this.events.on('didPathChanged', callback);\n      EventBus.getInstance().publish(EventBus.EVT_PATH_CHANGED, this.currentProjectPath)\n    }\n\n    getCurrentProjectPath(): string {\n      return this.currentProjectPath;\n    }\n\n}\n"]}