{"version":3,"file":"DEWorkbench.js","sourceRoot":"","sources":["../../src/DEWorkbench/DEWorkbench.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { ToolbarView } from '../toolbar/ToolbarView'\nimport { NewProjectView } from '../views/NewProject/NewProjectView'\nimport { EventEmitter }  from 'events';\nconst { CompositeDisposable } = require('atom');\nimport { DebugAreaView }from '../views/DebugAreaView'\nimport { CordovaUtils } from '../cordova/CordovaUtils'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager'\nimport { Logger } from '../logger/Logger'\nimport { ProjectSettingsView } from '../views/ProjectSettings/ProjectSettingsView'\nimport { LoggerView } from '../views/LoggerView'\nimport { TaskConfigView } from '../views/TaskConfig/TastConfigView'\nimport {CordovaProjectInfo} from '../cordova/Cordova'\nimport { CordovaTaskConfiguration } from '../cordova/CordovaTasks'\nimport { TaskExecutor} from '../tasks/TaskExecutor'\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject\n } from '../element/index';\n\n export interface WorkbenchOptions {\n   didToggleToolbar?: Function,\n   didToggleDebugArea?:Function,\n   didProjectSettings?:Function,\n   didToggleConsole?:Function\n}\n\n\n export class DEWorkbench {\n\n   public toolbarView: ToolbarView\n   public debugAreaView: DebugAreaView\n   public loggerView: LoggerView\n   private events: EventEmitter;\n   public projectManager: ProjectManager;\n   public selectedProjectForTask: CordovaProjectInfo;\n   private taskExecutor:TaskExecutor;\n   private taskConfiguration:CordovaTaskConfiguration;\n   constructor(options:WorkbenchOptions){\n     Logger.getInstance().info(\"Initializing DEWorkbench...\");\n\n     //let cu = new CordovaUtils();\n\n     this.projectManager = ProjectManager.getInstance();\n\n     this.events = new EventEmitter();\n\n     // Create the main toolbar\n     this.toolbarView = new ToolbarView({\n       didNewProject: () => {\n         this.showNewProjectModal();\n      },\n      didToggleToolbar: () => {\n          this.toggleToolbar();\n      },\n      didToggleDebugArea: () => {\n        this.toggleDebugArea();\n      },\n      didProjectSettings: () => {\n          this.showProjectSettings();\n      },\n      didToggleConsole:() => {\n        this.toggleLogger();\n      },\n      didSelectProjectForRun: (projectInfo:CordovaProjectInfo) => {\n        console.log(\"didSelectProjectForRun\",projectInfo);\n        this.selectedProjectForTask = projectInfo;\n      },\n      didSelectTaskClick: () => {\n        console.log(\"didSelectTaskClick\");\n        this.showCordovaTaskModal();\n      },\n      didStop:() => {\n        this.onStopTask();\n      },\n      didRun : () => {\n        this.onTaskRunRequired(this.taskConfiguration);\n      }\n     });\n\n     // Create the Logger inspector\n     //this.loggerView = new LoggerView();\n\n     //this.debugAreaView = new DebugAreaView();\n\n     attachEventFromObject(this.events, [\n       'didToggleToolbar'\n     ], options);\n\n     ProjectManager.getInstance().didProjectChanged((projectPath)=>this.onProjectChanged(projectPath));\n     //this.events.on('didStop',this.onStopTask.bind(this));\n     this.events.on('didRunTask',this.onTaskRunRequired.bind(this));\n     Logger.getInstance().info(\"DEWorkbench initialized successfully.\");\n   }\n\n   public showNewProjectModal(){\n     // Create the New Project modal window\n     let newProjectView = new NewProjectView();\n     newProjectView.open();\n   }\n\n   onProjectChanged(projectPath:String){\n     Logger.getInstance().debug(\"DEWorkbench onProjectChanged: \", projectPath);\n   }\n\n   openProjectInspector(){\n   }\n\n   openDebugArea(){\n     if (!this.debugAreaView){\n       this.debugAreaView = new DebugAreaView();\n     }\n     this.debugAreaView.open();\n   }\n\n   openLogger(){\n     if (!this.loggerView){\n       this.loggerView = new LoggerView();\n     }\n     this.loggerView.open();\n   }\n\n   showProjectSettings() {\n     Logger.getInstance().debug(\"DEWorkbench showProjectSettings called\");\n     let currentprojectPath:string = this.projectManager.getCurrentProjectPath();\n     if (currentprojectPath){\n       let projectSettingsView = new ProjectSettingsView(currentprojectPath);\n       projectSettingsView.open();\n     }\n   }\n\n   toggleToolbar() {\n     this.toolbarView.toggle();\n   }\n\n   toggleDebugArea(){\n     Logger.getInstance().debug(\"DEWorkbench toggleDebugArea called\");\n     this.events.emit('didToggleDebugArea');\n     this.openDebugArea();\n   }\n\n   toggleLogger(){\n     Logger.getInstance().debug(\"DEWorkbench toggleLogger called\");\n     this.events.emit('didToggleLogger');\n     this.openLogger();\n   }\n\n   getToolbarElement() {\n       return this.toolbarView.getElement();\n   }\n\n   showCordovaTaskModal(){\n     console.log(\"showCordovaTaskModal\");\n     if(this.selectedProjectForTask == null){\n       Logger.getInstance().warn(\"select project before run task\");\n       return;\n     }\n     let taskConfigView:TaskConfigView = new TaskConfigView(\"Task Configuration\",this.events);\n     taskConfigView.setProject(this.selectedProjectForTask);\n     taskConfigView.show();\n   }\n\n   onTaskRunRequired(taskConfiguration:CordovaTaskConfiguration){\n     console.log(\"onTaskRunRequired\",taskConfiguration);\n     this.taskConfiguration = taskConfiguration;\n     if(!taskConfiguration){\n       Logger.getInstance().warn(\"Null task selected\");\n       this.toolbarView.setTaskConfiguration(null);\n       return;\n     }\n     Logger.getInstance().info(\"Require execute of task\", taskConfiguration.name, this.selectedProjectForTask);\n     this.toolbarView.setTaskConfiguration(taskConfiguration);\n     let project = this.selectedProjectForTask;\n     let platform = taskConfiguration.selectedPlatform ? taskConfiguration.selectedPlatform.name : \"\";\n     this.toolbarView.setInProgressStatus(`${taskConfiguration.displayName} - ${platform}  in progress...`);\n     this.getTaskExecutor().executeTask(taskConfiguration,project).then(() => {\n       this.toolbarView.setSuccessStatus(`${taskConfiguration.displayName} - ${platform} Done`);\n     },(reason) => {\n       this.toolbarView.setErrorStatus(`${taskConfiguration.displayName} - ${platform} Fail`);\n        Logger.getInstance().error(reason);\n     }).catch((err:Error) => {\n       this.toolbarView.setErrorStatus(`${taskConfiguration.displayName} - ${platform} Fail`);\n       Logger.getInstance().error(err.message, err.stack);\n     });\n   }\n\n   onStopTask(){\n     console.log(\"onStopTask\");\n     if(this.taskExecutor && this.taskExecutor.isBusy()){\n       this.taskExecutor.stop();\n     }\n   }\n\n\n   getTaskExecutor():TaskExecutor{\n     if(!this.taskExecutor){\n       this.taskExecutor = new TaskExecutor();\n     }\n     return this.taskExecutor;\n   }\n\n   destroy () {\n     // destroy all\n     Logger.getInstance().info(\"DEWorkbench destroying...\");\n   }\n\n}\n"]}