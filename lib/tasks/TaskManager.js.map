{"version":3,"file":"TaskManager.js","sourceRoot":"","sources":["../../src/tasks/TaskManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AACX,OAAO,EAAC,wBAAwB,EAAC,MAAM,yBAAyB,CAAC;AAEjE,MAAM;IAIJ;QADQ,iBAAY,GAAkC,IAAI,CAAC;QAEzD,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,EAAE,CAAA,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA,CAAC;YACxB,WAAW,CAAC,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;QAC3C,CAAC;QACD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAEM,cAAc;QACnB,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,CAAA,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,kBAAkB;QAChB,IAAI,UAAU,GAAG,IAAI,wBAAwB,CAAC,gBAAgB,EAAC,SAAS,CAAC,CAAC;QAC1E,UAAU,CAAC,WAAW,GAAC,SAAS,CAAC;QACjC,UAAU,CAAC,WAAW,GAAG;YACvB,eAAe,EAAC,KAAK;YACrB,mBAAmB,EAAC,KAAK;YACzB,eAAe,EAAC,IAAI;YACpB,iBAAiB,EAAC,IAAI;SACvB,CAAA;QACD,IAAI,QAAQ,GAAE,IAAI,wBAAwB,CAAC,aAAa,EAAC,OAAO,CAAC,CAAC;QAClE,QAAQ,CAAC,WAAW,GAAC,OAAO,CAAC;QAC7B,QAAQ,CAAC,WAAW,GAAG;YACrB,eAAe,EAAC,KAAK;YACrB,mBAAmB,EAAC,KAAK;YACzB,eAAe,EAAC,IAAI;YACpB,iBAAiB,EAAC,IAAI;SACvB,CAAA;QACD,IAAI,MAAM,GAAG,IAAI,wBAAwB,CAAC,YAAY,EAAC,KAAK,CAAC,CAAC;QAC9D,MAAM,CAAC,WAAW,GAAC,KAAK,CAAC;QACzB,MAAM,CAAC,WAAW,GAAG;YACnB,eAAe,EAAC,IAAI;YACpB,mBAAmB,EAAC,KAAK;YACzB,eAAe,EAAC,IAAI;YACpB,iBAAiB,EAAC,IAAI;SACvB,CAAA;QACD,IAAI,cAAc,GAAG,IAAI,wBAAwB,CAAC,gBAAgB,EAAC,UAAU,CAAC,CAAC;QAC/E,cAAc,CAAC,WAAW,GAAC,aAAa,CAAC;QACzC,cAAc,CAAC,WAAW,GAAG;YAC3B,eAAe,EAAC,IAAI;YACpB,mBAAmB,EAAC,KAAK;YACzB,eAAe,EAAC,IAAI;YACpB,iBAAiB,EAAC,IAAI;SACvB,CAAA;QACD,IAAI,KAAK,GAAmC,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;QAC3F,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["'use babel'\nimport {CordovaTaskConfiguration} from '../cordova/CordovaTasks';\n\nexport class TaskManager{\n\n  private static instance:TaskManager;\n  private defaultTasks:Array<CordovaTaskConfiguration>= null;\n  private constructor(){\n    console.log(\"Create TaskManager\");\n  }\n\n  public static getInstance():TaskManager{\n    if(!TaskManager.instance){\n      TaskManager.instance = new TaskManager();\n    }\n    return TaskManager.instance;\n  }\n\n  public getDefaultTask(){\n    if(this.defaultTasks == null){\n      this.defaultTasks = this.createDefaultTasks();\n    }\n    return this.defaultTasks;\n  }\n\n  createDefaultTasks():Array<CordovaTaskConfiguration>{\n    let cdvPrepare = new CordovaTaskConfiguration('CordovaPrepare','prepare');\n    cdvPrepare.displayName='Prepare';\n    cdvPrepare.constraints = {\n      isDeviceEnabled:false,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let cdvBuild= new CordovaTaskConfiguration('CordovaBuid','build');\n    cdvBuild.displayName='Build';\n    cdvBuild.constraints = {\n      isDeviceEnabled:false,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let cdvRun = new CordovaTaskConfiguration('CordovaRun','run');\n    cdvRun.displayName='Run';\n    cdvRun.constraints = {\n      isDeviceEnabled:true,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let cdvBuildAndRun = new CordovaTaskConfiguration('CordovaBuidRun','buildRun');\n    cdvBuildAndRun.displayName='Build & Run';\n    cdvBuildAndRun.constraints = {\n      isDeviceEnabled:true,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let tasks:Array<CordovaTaskConfiguration> = [cdvPrepare, cdvBuild, cdvRun, cdvBuildAndRun];\n    return tasks;\n  }\n}\n"]}