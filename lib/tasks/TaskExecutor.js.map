{"version":3,"file":"TaskExecutor.js","sourceRoot":"","sources":["../../src/tasks/TaskExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager';\nimport { Cordova , CordovaProjectInfo} from '../cordova/Cordova';\nimport { CordovaTaskConfiguration } from '../cordova/CordovaTasks'\nexport class TaskExecutor{\n  private currentTask:CordovaTaskConfiguration;\n  private cordova:Cordova\n  constructor(){\n      this.cordova=ProjectManager.getInstance().cordova;\n  }\n  public async executeTask(taskConfig:CordovaTaskConfiguration,project:CordovaProjectInfo):Promise<any>{\n    if(this.isBusy()){\n      throw new Error(\"TaskExecutor is busy\");\n    }\n    this.currentTask = taskConfig;\n    try{\n      switch(this.currentTask.taskType){\n        case \"prepare\":\n            await this.executePrepare(project);\n            this.currentTask = null;\n        break;\n        case \"build\":\n            await this.executeBuild(project);\n            this.currentTask = null\n        break;\n        case \"run\":\n            await this.executeRun(project);\n            this.currentTask = null\n        case \"buildRun\":\n            await this.executeBuild(project);\n            // TODO publish progress\n            await this.executeRun(project)\n            this.currentTask = null\n        break;\n      }\n    }catch(err){\n      this.currentTask = null;\n      throw err;\n    }\n  }\n  public async executeTaskChain(taskChain:Array<CordovaTaskConfiguration>,project:CordovaProjectInfo){\n    for(let task of taskChain){\n      await this.executeTask(task,project);\n    }\n  }\n  isBusy():boolean{\n    return this.currentTask != null;\n  }\n  async executeBuild(project:CordovaProjectInfo){\n    let platform= this.currentTask.selectedPlatform ?this.currentTask.selectedPlatform.name : null;\n    return this.cordova.buildProject(project.path, platform ,{});\n  }\n\n  async executeRun(project:CordovaProjectInfo){\n    let platform = this.currentTask.selectedPlatform ?this.currentTask.selectedPlatform.name : null;\n    return this.cordova.runProject(project.path, platform ,null,{});\n  }\n\n  async executePrepare(project:CordovaProjectInfo){\n    let platform = this.currentTask.selectedPlatform ?this.currentTask.selectedPlatform.name : null;\n    //return this.cordova.prepareProjectWithBrowserPatch(project.path);\n    return this.cordova.prepareProject(project.path,platform);\n  }\n\n  stop(){\n    this.cordova.stopExecutor();\n  }\n}\n"]}