{"version":3,"file":"MOTIFMockServer.js","sourceRoot":"","sources":["../../src/MOTIFMockServer/MOTIFMockServer.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { LoggerService } from '../Logger'\nimport { DEWBResourceManager } from '../utils/DEWBResourceManager'\nimport { WorkbenchServices } from '../WorkbenchServices'\nimport { EventEmitter }  from 'events'\nimport { MOTIFServerConfigUI } from './MOTIFServerConfigUI'\nimport { MotifServerConfig } from './MOTIFMockServerCommons'\n\nconst {allowUnsafeEval, allowUnsafeNewFunction} = require('loophole');\nconst {ServerManagerFactory,ServerManager}  = allowUnsafeNewFunction(()=> allowUnsafeEval(() => require('de-mock-server-lib')));\n\nconst fs = require('fs');\nconst path = require('path');\nconst basePath = process.cwd();\n\nexport enum ServerStatus {\n  Stopped = 0,\n  Starting,\n  Running,\n  Stopping\n}\n\nexport interface ServerInstance {\n  start();\n  stop();\n  status:ServerStatus;\n  configure(configuration:any);\n  addEventListener(event:string, listener);\n  removeEventListener(event:string, listener);\n  getConfigurator(configuration:any):ServerInstanceConfigurator;\n}\n\nexport interface ServerInstanceConfigurator {\n    getConfiguration():any;\n    addEventListener(event:string, listener);\n    removeEventListener(event:string, listener);\n    getConfigurationPane():HTMLElement;\n    revertChanges();\n    applyConfiguration(configuration:any);\n}\n\nexport interface ServerProvider {\n  createInstance(configuration:any):ServerInstance;\n  destroyInstance(instance:ServerInstance);\n  getProviderName():string;\n}\n\n\nexport class MotifMockServerProvider implements ServerProvider {\n\n  constructor(){\n  }\n\n  createInstance(configuration:any):ServerInstance {\n    return new MotifMockServer(configuration);\n  }\n\n  getProviderName():string {\n      return \"Vipera MOTIF Mock Server\"\n  }\n\n  destroyInstance(instance:ServerInstance) {\n    //TODO!!\n  }\n\n}\n\nclass MotifMockServer implements ServerInstance {\n\n  status:ServerStatus=ServerStatus.Stopped;\n  protected events:EventEmitter;\n  protected config:any;\n  protected serverManager:any;\n  protected configurator:MotifFMockConfigurator;\n\n  constructor(config:any){\n    this.events = new EventEmitter();\n    this.config = config;\n    this.initConfigurator();\n  }\n\n  initConfigurator(){\n    this.configurator = new MotifFMockConfigurator();\n  }\n\n  private validateConfiguration(){\n    if (!this.config){\n        throw(\"Unable to start the server because it is not yet properly configured.\")\n    }\n  }\n\n  start(){\n    if (this.status===ServerStatus.Stopped){\n      this.validateConfiguration();\n      console.log(\"Starting MOTIF Mock server: \",basePath);\n      //const config = JSON.parse(fs.readFileSync('config.json', 'utf8'));\n      this.resolvePaths(this.config);\n      this.serverManager = ServerManagerFactory.createServerManager();\n      this.serverManager.start(this.config);\n      this.status = ServerStatus.Running\n      this.fireStatusChange()\n    } else {\n      //server already started...\n    }\n  }\n\n  stop(){\n    if (this.status===ServerStatus.Running){\n      console.log(\"Stopping MOTIF Mock server: \",basePath);\n      this.status = ServerStatus.Stopping\n      this.serverManager.stop();\n      this.serverManager = null;\n      this.status = ServerStatus.Stopped\n      this.fireStatusChange()\n    } else {\n      //server not runnig or stopping\n    }\n  }\n\n  configure(){\n    this.config = this.configurator.getConfiguration();\n  }\n\n  addEventListener(event:string, listener){\n    this.events.addListener(event, listener)\n  }\n\n  removeEventListener(event:string, listener){\n    this.events.removeListener(event, listener)\n  }\n\n  getConfigurator(configuration:any):MotifFMockConfigurator {\n    return this.configurator;\n  }\n\n  protected fireStatusChange(){\n    this.events.emit('onDidStatusChange', this)\n    this.fireLogEvent(\"Server is \" + this.statusStr);\n  }\n\n  protected get statusStr():string {\n    if (this.status == ServerStatus.Stopped){\n      return \"Stopped\";\n    } else if (this.status == ServerStatus.Running){\n      return \"Running\";\n    } else if (this.status == ServerStatus.Starting){\n      return \"Starting\";\n    } else if (this.status == ServerStatus.Stopping){\n      return \"Stopping\";\n    }\n  }\n\n  protected fireLogEvent(message:string){\n    this.events.emit('onDidLogEvent', { \"instance\": this, \"message\": message } );\n  }\n\n  // Utilities\n  resolvePaths(config) {\n    if(config.mockModulePath) {\n      config.mockModulePath = path.resolve(basePath,config.mockModulePath);\n    }\n    if(config.libraryLoaderPath) {\n      config.libraryLoaderPath = path.resolve(basePath,config.libraryLoaderPath);\n    }\n    if(config.mockModulePath) {\n      config.localDBPath = path.resolve(basePath,config.localDBPath);\n    }\n  }\n\n}\n\nclass MotifFMockConfigurator implements ServerInstanceConfigurator {\n\n  events:EventEmitter;\n  currentConfig:MotifServerConfig;\n  configUI:MOTIFServerConfigUI;\n\n  constructor(){\n    this.events = new EventEmitter();\n  }\n\n  protected initUI(){\n    this.configUI = new MOTIFServerConfigUI();\n    this.updateUI();\n  }\n\n  getConfiguration():MotifServerConfig{\n    return this.configUI.getConfiguration();\n  }\n\n  addEventListener(event:string, listener) {\n    this.events.addListener(event, listener)\n  }\n\n  removeEventListener(event:string, listener){\n    this.events.removeListener(event, listener)\n  }\n\n  applyConfiguration(configuration:any){\n    this.currentConfig = configuration;\n    if (this.configUI){\n      this.updateUI();\n    }\n  }\n\n  getConfigurationPane():HTMLElement {\n    if (!this.configUI){\n      this.initUI();\n    }\n    return this.configUI.mainElement;\n  }\n\n  protected updateUI(){\n    if (this.configUI){\n      this.configUI.updateUI(this.currentConfig);\n    }\n  }\n\n  protected fireConfigChanged(){\n    this.events.emit(\"didConfigurationChange\", this)\n  }\n\n  revertChanges(){\n    this.updateUI()\n  }\n\n}\n"]}