{"version":3,"file":"LoggerView.js","sourceRoot":"","sources":["../../src/views/LoggerView.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEF,OAAO,EAEL,aAAa,EACb,aAAa,EAOd,MAAM,kBAAkB,CAAC;AAE3B,OAAO,EAAE,YAAY,EAAE,MAAO,QAAQ,CAAA;AAKtC,OAAO,EAAE,MAAM,EAA0B,MAAM,kBAAkB,CAAA;AACjE,OAAO,EAAE,iBAAiB,EAA2B,MAAM,oCAAoC,CAAA;AAE/F,MAAM;IASJ;QACE,wBAAwB;QACxB,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAExD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAA;QAEhC,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,cAAc,EAAE,CAAC;IAExB,CAAC;IAED,cAAc;QACZ,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,MAAM,CAAC,WAAW,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACjE,CAAC;IAED,SAAS,CAAC,KAAc,EAAE,GAAU;QAClC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,EAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACnD,qBAAqB;QACrB,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,KAAK,EAAC;YACjC,QAAQ,EAAG,EACV;SACF,CAAC,CAAC;QACH,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACH,IAAI;QACF,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACb,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAO,MAAM,GAAG,MAAM,CAAC;YACvB,MAAM,GAAG,GAAG,MAAM,GAAG,IAAI,GAAG,aAAa,CAAC;YAC1C,IAAI,CAAC,IAAI,GAAG;gBACV,YAAY,EAAE,IAAI;gBAClB,cAAc,EAAE,IAAI;gBACpB,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,QAAQ,EAAE,MAAM,4BAA4B;gBAC5C,MAAM,EAAE,MAAM,GAAG;gBACjB,kBAAkB,EAAE,MAAM,QAAQ;gBAClC,mBAAmB,EAAE,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;aAC9D,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;gBAC3C,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;IACnB,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { CordovaUtils } from '../cordova/CordovaUtils'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager'\nimport { Cordova, CordovaPlatform, CordovaPlugin } from '../cordova/Cordova'\nimport { UIListView, UIListViewModel } from '../ui-components/UIListView'\nimport { Logger,LoggerListener ,LogLevel} from '../logger/Logger'\nimport { UILoggerComponent,LogLine,IFilterableModel } from '../ui-components/UILoggerComponent'\n\nexport class LoggerView implements LoggerListener {\n\n  private element: HTMLElement\n  private events: EventEmitter\n  private panel: any\n  private item: any;\n  private atomWorkspace:any;\n  private loggerComponent:UILoggerComponent;\n\n  constructor () {\n    //this.bindWihtLogger();\n    Logger.getInstance().info(\"LoggerView initializing...\");\n\n    this.atomWorkspace = atom.workspace;\n    this.events = new EventEmitter()\n\n    this.initUI();\n    this.bindWithLogger();\n\n  }\n\n  bindWithLogger(){\n    console.log(\"bindWithLogger\");\n    Logger.getInstance().addLoggingListener(this);\n    Logger.getInstance().debug(\"LoggerView -> bind with log done\");\n  }\n\n  onLogging(level:LogLevel, msg:string){\n    this.loggerComponent.addLog(msg,level);\n  }\n\n  /**\n   * Initialize the UI\n   */\n  initUI() {\n    Logger.getInstance().debug(\"LoggerView initUI called...\");\n    this.loggerComponent = new UILoggerComponent(true);\n    // Create the main UI\n    this.element = createElement('div',{\n      elements : [\n      ]\n    });\n    insertElement(this.element, this.loggerComponent.element());\n  }\n\n  /**\n   * Open this view\n   */\n  open () {\n    Logger.getInstance().debug(\"LoggerView open called...\");\n    if (this.item){\n      this.atomWorkspace.toggle(this.item);\n    } else {\n      const  prefix = \"dewb\";\n      const uri = prefix + '//' + '_loggerview';\n      this.item = {\n        activatePane: true,\n        searchAllPanes: true,\n        location: 'bottom',\n        element: this.element,\n        getTitle: () => 'DE Workbench Log Inspector',\n        getURI: () => uri,\n        getDefaultLocation: () => 'bottom',\n        getAllowedLocations: () => ['bottom', 'top', 'left', 'right']\n      };\n      this.atomWorkspace.open(this.item).then((view)=>{\n        this.loggerComponent.updateScroll();\n      });\n    }\n  }\n\n  /**\n   * close this view\n   */\n  close () {\n    this.panel.hide()\n  }\n\n}\n"]}