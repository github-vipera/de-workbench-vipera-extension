{"version":3,"file":"TaskViewPanel.js","sourceRoot":"","sources":["../../../src/views/TaskConfig/TaskViewPanel.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport {\n  createText,\n  createElement,\n  insertElement,\n  createButton,\n  createIcon,\n  attachEventFromObject,\n  createSelect,\n  createInput\n} from '../../element/index';\n\nimport { UIComponent, UIBaseComponent } from '../../ui-components/UIComponent'\nimport { UISelect, UISelectItem, UISelectListener } from '../../ui-components/UISelect'\nimport { CordovaPlatform, CordovaProjectInfo } from '../../cordova/Cordova'\nimport { CordovaTaskConfiguration, CordovaTask, TaskConstraints } from '../../cordova/CordovaTasks'\nimport { TaskManager } from '../../tasks/TaskManager'\nimport { UITreeViewModel, UITreeItem, UITreeView,UITreeViewSelectListener,findItemInTreeModel } from '../../ui-components/UITreeView'\nimport { find,forEach,map } from 'lodash'\nimport { CordovaDeviceManager, CordovaDevice } from '../../cordova/CordovaDeviceManager'\nimport { UILineLoader } from '../../ui-components/UILineLoader'\n\nclass TaskViewContentPanel extends UIBaseComponent{\n  taskConfig:CordovaTaskConfiguration\n  projectInfo:CordovaProjectInfo\n  private deviceManager:CordovaDeviceManager;\n  private platformSelect:UISelect;\n  private platformSelectListener:UISelectListener;\n  private deviceSelect:UISelect;\n  private npmScriptsSelect:UISelect;\n  private deviceLineLoader: UILineLoader;\n  private isReleaseEl:HTMLElement\n\n  constructor(){\n    super();\n    this.initUI();\n  }\n\n  private initUI(){\n    this.mainElement = createElement('atom-panel',{\n      className:'de-workbench-taskpanel-content',\n      elements:[\n      ]\n    });\n    this.mainElement.classList.add('form-container');\n    this.createPlatformSelect();\n    this.createDeviceSelect();\n    this.createCheckboxSelect();\n    this.createNodeTaskSelector();\n    //this.createMockPanel();\n  }\n\n  private createPlatformSelect(){\n    this.platformSelect = new UISelect();\n    this.platformSelectListener = {\n      onItemSelected:() => {\n        this.updateDevices(this.getSelectedPlatform());\n      }\n    };\n    this.platformSelect.addSelectListener(this.platformSelectListener);\n    let row=this.createFormRow(createText('Platform'),this.platformSelect.element(),'platforms');\n    insertElement(this.mainElement,row);\n  }\n\n  private updatePlatforms(){\n    let platforms:Array<CordovaPlatform> = this.projectInfo? this.projectInfo.platforms: [];\n    let model:Array<UISelectItem> = map <CordovaPlatform,UISelectItem> (platforms, (single:CordovaPlatform) => {\n      return {\n        value:single.name,\n        name:single.name\n      };\n    });\n    this.platformSelect.setItems(model)\n  }\n\n  private createNodeTaskSelector(){\n    this.npmScriptsSelect = new UISelect();\n    let row=this.createFormRow(createText('Npm scripts (before task)'),this.npmScriptsSelect.element(),'npmScript');\n    insertElement(this.mainElement,row);\n  }\n\n  private updateNodeScripts(){\n    let npmScripts:Array<string> = this.projectInfo ? this.projectInfo.npmScripts : [];\n    let model:Array<UISelectItem> = map<any,UISelectItem>(npmScripts,(value:string ,key:string) => {\n      return {\n        name:key,\n        value:key\n      }\n    });\n    model.unshift({\n      name:'-- None -- ',\n      value:''\n    })\n    this.npmScriptsSelect.setItems(model);\n  }\n\n  private createMockPanel(){\n\n  }\n\n  private createDeviceSelect(){\n    this.deviceSelect = new UISelect();\n    this.deviceLineLoader= new UILineLoader();\n    let wrapper=createElement('div',{\n      className:'line-loader-wrapper',\n      elements:[\n        this.deviceSelect.element(),\n        this.deviceLineLoader.element()\n      ]\n    });\n    let row=this.createFormRow(createText('Device / Emulator'),wrapper,'devices');\n    insertElement(this.mainElement,row);\n  }\n\n  private async updateDevices(platform:CordovaPlatform){\n    if(!this.deviceManager || !platform){\n      return Promise.resolve([]);\n    }\n    this.deviceLineLoader.setOnLoading(true);\n    let devices= await this.deviceManager.getDeviceList(platform.name);\n    let model:Array<UISelectItem> = map<CordovaDevice,UISelectItem>(devices,(single:CordovaDevice) => {\n      return {\n        value:single.targetId,\n        name:single.name\n      }\n    });\n    this.deviceSelect.setItems(model)\n    this.deviceLineLoader.setOnLoading(false);\n  }\n\n  private createRowId(elementId:string):string{\n    return \"row-\" + elementId;\n  }\n\n  private createFormRow(text: HTMLElement | Text,element:HTMLElement,rowId?:string):HTMLElement{\n    let row=createElement('div',{\n      className:'control-row',\n      id: this.createRowId(rowId || element.id),\n      elements:[\n        text,\n        element]\n    });\n    return row;\n  }\n\n  contextualize(taskConfig:CordovaTaskConfiguration,projectInfo:CordovaProjectInfo){\n    this.taskConfig = taskConfig;\n    this.projectInfo = projectInfo;\n    if(!this.deviceManager){\n      this.deviceManager = new CordovaDeviceManager(this.projectInfo.path);\n    }\n    setTimeout(() => {\n      this.contextualizeImpl();\n    });\n  }\n\n  private setRowVisible(rowId:string,visible:boolean){\n    var el = document.getElementById(rowId);\n    if(el && el.style){\n      el.style.display = visible? 'block' : 'none';\n    }\n  }\n\n  private contextualizeImpl(){\n    if(!this.getSelectedPlatform()){\n      this.updatePlatforms();\n    }\n    this.applyConstraintsToView(this.taskConfig.constraints);\n  }\n\n  private applyConstraintsToView(constraints:TaskConstraints){\n      if(constraints.isDeviceEnabled){\n        this.updateDevices(this.getSelectedPlatform());\n      }\n      this.setRowVisible(this.createRowId('devices'),constraints.isDeviceEnabled);\n\n      if(constraints.isNodeTaskEnabled){\n        this.updateNodeScripts();\n      }\n      this.setRowVisible(this.createRowId('npmScript'),constraints.isNodeTaskEnabled);\n  }\n\n  private getSelectedPlatform():CordovaPlatform{\n    let platformValue = this.platformSelect.getSelectedItem();\n    if(platformValue){\n      return { name:platformValue };\n    }\n    return null;\n  }\n\n  private getSelectedDevice():CordovaDevice {\n    let value= this.deviceSelect.getSelectedItem();\n    if(value){\n      return {\n        targetId:value,\n        name:value\n      }\n    }\n    return null;\n  }\n\n  private createCheckboxSelect(){\n    this.isReleaseEl = createInput({\n      type:'checkbox'\n    });\n    this.isReleaseEl.classList.remove('form-control');\n    this.isReleaseEl.setAttribute('name','release');\n    let label:HTMLElement= createElement('label',{\n      className:\"label-for\"\n    });\n    label.innerText = 'Release'\n    label.setAttribute('for','release');\n    let row= this.createFormRow(label,this.isReleaseEl,'isRelease')\n    insertElement(this.mainElement,row);\n  }\n\n  getCurrentConfiguration():CordovaTaskConfiguration{\n    let platformValue = this.platformSelect.getSelectedItem();\n    if(platformValue){\n      this.taskConfig.selectedPlatform = {name:platformValue};\n    }\n    return this.taskConfig;\n  }\n}\n\n\n\n// SELECTOR PANEL\n\n\n\nclass TaskViewSelectorPanel extends UIBaseComponent implements UITreeViewSelectListener{\n  private treeModel:UITreeViewModel;\n  private treeView:UITreeView;\n  private taskSelectionListener:(itemId:string) => void\n  constructor(){\n    super();\n    this.initUI();\n  }\n  buildTreeModel(cvdTask:Array<CordovaTaskConfiguration>):void{\n    let customTaskNode = this.createCustomTaskNode();\n    let cvdTaskNode = this.createCdvTaskNode(cvdTask);\n    let root:UITreeItem = {\n      id : 'root',\n      name: 'task',\n      expanded : true,\n      children: [\n          cvdTaskNode,\n          customTaskNode\n      ]\n    };\n    this.treeModel = {\n      root: root,\n      getItemById:findItemInTreeModel\n    };\n  }\n  initUI(){\n    this.mainElement = createElement('atom-panel',{\n      className:'de-workbench-taskpanel-tree-area',\n    });\n  }\n  buildAndAddTreeView(cvdTask:Array<CordovaTaskConfiguration>){\n    this.buildTreeModel(cvdTask);\n    this.treeView = new UITreeView(this.treeModel);\n    this.treeView.addSelectListener(this);\n    insertElement(this.mainElement,this.treeView.element());\n  }\n  createCustomTaskNode():UITreeItem{\n    //TODO load from project file\n    return { id: 'custom', name: 'Custom', icon: 'test-ts-icon'};\n  }\n\n  createCdvTaskNode(cvdTask:Array<CordovaTaskConfiguration>):UITreeItem{\n    let children = map<CordovaTaskConfiguration,UITreeItem>(cvdTask,(item:CordovaTaskConfiguration) => {\n      return  { id: item.name, name: item.displayName};\n    });\n    return { id: 'default', name: 'Cordova', icon: null,\n      expanded : true,\n      children: children\n    };\n  }\n\n  onItemSelected(itemId:string,item:UITreeItem){\n    console.log(\"selected: \",itemId,item);\n    if(this.taskSelectionListener){\n      this.taskSelectionListener(itemId);\n    }\n  }\n\n  setOnTaskChangeListener(callback: (itemId:string) => void):void{\n    this.taskSelectionListener = callback;\n  }\n\n}\n\n\n\n// VIEW PANEL (aka main panel)\n\nexport class TaskViewPanel extends UIBaseComponent{\n  private threeViewPanel: TaskViewSelectorPanel;\n  private taskContentPanel : TaskViewContentPanel;\n  private project:CordovaProjectInfo;\n  constructor(){\n    super();\n    this.initUI();\n  }\n  initUI():void{\n    this.mainElement = createElement('div',{\n      className:'de-workbench-taskpanel-container'\n    });\n    this.threeViewPanel = this.createTreeViewPanel();\n    this.threeViewPanel.setOnTaskChangeListener((itemId:string) => {\n      let config= this.getTaskConfigurationByName(itemId);\n      this.taskContentPanel.contextualize(config,this.project);\n    });\n    this.taskContentPanel = this.createContentPanel();\n    insertElement(this.mainElement,this.threeViewPanel.element());\n    insertElement(this.mainElement,this.taskContentPanel.element());\n  }\n\n  private createContentPanel():TaskViewContentPanel{\n    let taskContentPanel = new TaskViewContentPanel();\n    return taskContentPanel;\n  }\n\n  private createTreeViewPanel():TaskViewSelectorPanel{\n    let taskThreeViewContainer = new TaskViewSelectorPanel();\n    return taskThreeViewContainer;\n  }\n\n  setProject(project:CordovaProjectInfo):void{\n    this.project= project;\n    this.update();\n  }\n\n  private update(){\n    this.threeViewPanel.buildAndAddTreeView(TaskManager.getInstance().getDefaultTask());\n  }\n\n  private getTaskConfigurationByName(name:string):CordovaTaskConfiguration{\n    let tasks = TaskManager.getInstance().getDefaultTask();\n    return find(tasks,(single:CordovaTaskConfiguration) => {\n      return single.name == name;\n    });\n  }\n\n\n  getConfiguration():CordovaTaskConfiguration{\n    return this.taskContentPanel.getCurrentConfiguration();\n  }\n}\n"]}