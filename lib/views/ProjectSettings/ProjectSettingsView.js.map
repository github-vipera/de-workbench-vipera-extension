{"version":3,"file":"ProjectSettingsView.js","sourceRoot":"","sources":["../../../src/views/ProjectSettings/ProjectSettingsView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { ProjectManager } from '../../DEWorkbench/ProjectManager'\nimport { Cordova, CordovaPlatform, CordovaPlugin } from '../../cordova/Cordova'\nimport { UIListView, UIListViewModel } from '../../ui-components/UIListView'\nimport { Logger } from '../../logger/Logger'\nimport { UITabbedView, UITabbedViewItem, UITabbedViewTabType } from '../../ui-components/UITabbedView'\nimport { InstalledPluginsView } from './InstalledPluginsView'\nimport { InstallNewPluginsView } from './InstallNewPluginsView'\nimport { VariantsView } from './VariantsView'\nimport { AppSignatureView } from './AppSignatureView'\nimport { GeneralSettingsView } from './GeneralSettingsView'\n\nconst crypto = require('crypto');\n\nexport class ProjectSettingsView {\n\n  private element: HTMLElement\n  private item: any;\n  private projectRoot: string;\n  private projectId: string;\n  private tabbedView: UITabbedView;\n  private atomTextEditor: any;\n\n  // Sub views\n  private installedPluginsView: InstalledPluginsView;\n  private installNewPluginsView: InstallNewPluginsView;\n  private variantsView: VariantsView;\n  private appSignatureView: AppSignatureView;\n  private generalSettingsView: GeneralSettingsView;\n\n  constructor(projectRoot:string){\n    this.projectRoot = projectRoot;\n    this.projectId = crypto.createHash('md5').update(projectRoot).digest(\"hex\");\n\n    Logger.getInstance().debug(\"ProjectSettingsView creating for \",this.projectRoot, this.projectId);\n\n    // Isnitialize the UI\n    this.initUI();\n\n    this.reloadProjectSettings();\n  }\n\n  private reloadProjectSettings(){\n  }\n\n  private initUI(){\n    Logger.getInstance().debug(\"ProjectSettingsView initUI called.\");\n\n    // create the single views\n    this.installedPluginsView = new InstalledPluginsView();\n    this.installNewPluginsView = new InstallNewPluginsView();\n    this.variantsView = new VariantsView();\n    this.appSignatureView = new AppSignatureView();\n    this.generalSettingsView = new GeneralSettingsView();\n\n    // Create the main UI\n    this.element = document.createElement('de-workbench-project-settings')\n\n    this.tabbedView = new UITabbedView();//.setTabType(UITabbedViewTabType.Horizontal);\n    this.tabbedView.addView(new UITabbedViewItem('general',           'General',              this.generalSettingsView.element()).setTitleClass('icon icon-settings'));\n    this.tabbedView.addView(new UITabbedViewItem('installed_plugins', 'Installed Plugins',    this.installedPluginsView.element()).setTitleClass('icon icon-beaker'));\n    this.tabbedView.addView(new UITabbedViewItem('install_plugins',   'Install New Plugins',  this.installNewPluginsView.element()).setTitleClass('icon icon-broadcast'));\n    this.tabbedView.addView(new UITabbedViewItem('variants',          'Build Variants',       this.variantsView.element()).setTitleClass('icon icon-code'));\n    this.tabbedView.addView(new UITabbedViewItem('app_signature',     'App Signature',        this.appSignatureView.element()).setTitleClass('icon icon-circuit-board'));\n\n    let el = createElement('div', {\n        elements: [\n          this.tabbedView.element()\n        ],\n        className: 'de-workbench-project-settings-view'\n    });\n    insertElement(this.element, el)\n  }\n\n  createSimpleEmptyView(color:string):HTMLElement {\n      let el = createElement('div',{\n        elements : [\n          createText(color)\n        ]\n      });\n      el.style[\"background-color\"] = color;\n      el.style[\"width\"] = \"100%\";\n      el.style[\"heightz\"] = \"100%\";\n      return el;\n  }\n\n  /**\n   * Open this view\n   */\n  open () {\n    Logger.getInstance().debug(\"ProjectSettingsView open called for \",this.projectRoot, this.projectId);\n    if (this.item){\n      atom.workspace[\"toggle\"](this.item);\n    } else {\n      const  prefix = \"dewb\";\n      const uri = prefix + '//' + '_prjsettings_' + this.projectId;\n      this.item = {\n        activatePane: true,\n        searchAllPanes: true,\n        location: 'center',\n        element: this.element,\n        getTitle: () => 'DE Project Settings',\n        getURI: () => uri,\n        destroy: ()=>{\n          this.destroy()\n        }\n      };\n      let atomWorkspace:any = atom.workspace;\n      atomWorkspace[\"open\"](this.item).then((view)=>{\n          this.atomTextEditor = view;\n      });\n    }\n  }\n\n  public destroy(){\n    this.generalSettingsView.destroy();\n    this.installedPluginsView.destroy();\n    this.installNewPluginsView.destroy();\n    this.variantsView.destroy();\n    this.appSignatureView.destroy();\n    this.tabbedView.destroy();\n    this.element.remove();\n  }\n\n}\n"]}